plugins {
	id 'org.springframework.build.runtimehints-agent'
	id "net.ltgt.errorprone"
}

description = "Spring Context"

apply plugin: "kotlin"

dependencies {
	api(project(":spring-aop"))
	api(project(":spring-beans"))
	api(project(":spring-core"))
	api(project(":spring-expression"))
	api("io.micrometer:micrometer-observation")
	optional(project(":spring-instrument"))
	optional("io.micrometer:context-propagation")
	optional("io.projectreactor:reactor-core")
	optional("jakarta.annotation:jakarta.annotation-api")
	optional("jakarta.ejb:jakarta.ejb-api")
	optional("jakarta.enterprise.concurrent:jakarta.enterprise.concurrent-api")
	optional("jakarta.inject:jakarta.inject-api")
	optional("jakarta.interceptor:jakarta.interceptor-api")
	optional("jakarta.validation:jakarta.validation-api")
	optional("javax.annotation:javax.annotation-api")
	optional("javax.inject:javax.inject")
	optional("javax.money:money-api")
	optional("org.apache.groovy:groovy")
	optional("org.apache-extras.beanshell:bsh")
	optional("org.aspectj:aspectjweaver")
	optional("org.crac:crac")
	optional("org.hibernate:hibernate-validator")
	optional("org.jetbrains.kotlin:kotlin-reflect")
	optional("org.jetbrains.kotlin:kotlin-stdlib")
	optional("org.jetbrains.kotlinx:kotlinx-coroutines-core")
	optional("org.reactivestreams:reactive-streams")
	testFixturesApi("org.junit.jupiter:junit-jupiter-api")
	testFixturesImplementation(testFixtures(project(":spring-beans")))
	testFixturesImplementation("com.google.code.findbugs:jsr305")
	testFixturesImplementation("io.projectreactor:reactor-test")
	testFixturesImplementation("org.assertj:assertj-core")
	testImplementation(project(":spring-core-test"))
	testImplementation(testFixtures(project(":spring-aop")))
	testImplementation(testFixtures(project(":spring-beans")))
	testImplementation(testFixtures(project(":spring-core")))
	testImplementation("jakarta.inject:jakarta.inject-tck")
	testImplementation("org.apache.commons:commons-pool2")
	testImplementation("org.apache.groovy:groovy-jsr223")
	testImplementation("org.apache.groovy:groovy-xml")
	testImplementation("org.awaitility:awaitility")
	testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-core")
	testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-reactor")
	testImplementation("io.reactivex.rxjava3:rxjava")
	testImplementation('io.micrometer:context-propagation')
	testImplementation("io.micrometer:micrometer-observation-test")
	testRuntimeOnly("jakarta.xml.bind:jakarta.xml.bind-api")
	testRuntimeOnly("org.glassfish:jakarta.el")
	// Substitute for javax.management:jmxremote_optional:1.0.1_04 (not available on Maven Central)
	testRuntimeOnly("org.glassfish.external:opendmk_jmxremote_optional_jar")
	testRuntimeOnly("org.javamoney:moneta")
	testRuntimeOnly("org.junit.vintage:junit-vintage-engine") // for @Inject TCK

	// ErrorProne and NullAway
	errorprone "com.uber.nullaway:nullaway:0.10.20"
	errorprone "edu.ucr.cs.riple.annot-util:AnnotLocator:0.1"
	errorprone "edu.ucr.cs.riple.annotator:annotator-scanner:1.3.14"
	errorprone "com.google.errorprone:error_prone_core:2.29.2"
	compileOnly "com.google.code.findbugs:jsr305:3.0.2"
	compileOnly "com.uber.nullaway:nullaway-annotations:0.10.20"
}


def scanner_path = project.projectDir.parent + "/annotator-out/scanner.xml"
def nullaway_path = project.projectDir.parent + "/annotator-out/nullaway.xml"

import net.ltgt.gradle.errorprone.CheckSeverity
tasks.withType(JavaCompile) {
	options.errorprone.disableAllChecks = true
	options.errorprone {
		check("NullAway", CheckSeverity.WARN)
		check("AnnotatorScanner", CheckSeverity.WARN)
		// check("AnnotLocator", CheckSeverity.WARN)
		option("NullAway:AnnotatedPackages", "org.springframework")
		option("NullAway:UnannotatedSubPackages", "org.springframework.instrument,org.springframework.context.index," +
				"org.springframework.asm,org.springframework.cglib,org.springframework.objenesis," +
				"org.springframework.javapoet,org.springframework.aot.nativex.substitution,org.springframework.aot.nativex.feature")
		option("NullAway:SerializeFixMetadata", "true")
		option("NullAway:AssertsEnabled", "true")
		option("NullAway:FixSerializationConfigPath", nullaway_path)
		option("AnnotatorScanner:ConfigPath",  scanner_path)
	}
	// Set max errors to 10000
	options.compilerArgs += ["-Xmaxerrs", "10000"]
	options.compilerArgs += ["-Xmaxwarns", "10000"]
}
