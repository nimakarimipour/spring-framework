description = "Spring Messaging"

apply plugin: "kotlin"
apply plugin: "kotlinx-serialization"
apply plugin: "net.ltgt.errorprone"

dependencies {
	api(project(":spring-beans"))
	api(project(":spring-core"))
	optional(project(":spring-context"))
	optional(project(":spring-oxm"))
	optional("com.fasterxml.jackson.core:jackson-databind")
	optional("com.google.code.gson:gson")
	optional("com.google.protobuf:protobuf-java-util")
	optional("io.projectreactor.netty:reactor-netty-http")
	optional("io.projectreactor.netty:reactor-netty5-http")
	optional("io.rsocket:rsocket-core")
	optional("io.rsocket:rsocket-transport-netty")
	optional("jakarta.json.bind:jakarta.json.bind-api")
	optional("jakarta.xml.bind:jakarta.xml.bind-api")
	optional("org.jetbrains.kotlinx:kotlinx-coroutines-reactor")
	optional("org.jetbrains.kotlinx:kotlinx-serialization-json")
	testImplementation(project(":spring-core-test"))
	testImplementation(testFixtures(project(":spring-core")))
	testImplementation("com.thoughtworks.xstream:xstream")
	testImplementation("io.projectreactor:reactor-test")
	testImplementation("io.reactivex.rxjava3:rxjava")
	testImplementation("jakarta.inject:jakarta.inject-tck")
	testImplementation("jakarta.servlet:jakarta.servlet-api")
	testImplementation("jakarta.validation:jakarta.validation-api")
	testImplementation("org.apache.activemq:activemq-broker")
	testImplementation("org.apache.activemq:activemq-kahadb-store")
	testImplementation("org.apache.activemq:activemq-stomp")
	testImplementation("org.jetbrains.kotlin:kotlin-reflect")
	testImplementation("org.jetbrains.kotlin:kotlin-stdlib")
	testImplementation("org.skyscreamer:jsonassert")
	testImplementation("org.xmlunit:xmlunit-assertj")
	testImplementation("org.xmlunit:xmlunit-matchers")
	testRuntimeOnly(project(":spring-context"))
	testRuntimeOnly("com.sun.activation:jakarta.activation")
	testRuntimeOnly("com.sun.xml.bind:jaxb-core")
	testRuntimeOnly("com.sun.xml.bind:jaxb-impl")
	testRuntimeOnly("jakarta.json:jakarta.json-api")
	testRuntimeOnly("org.eclipse:yasson")

	// ErrorProne and NullAway
	errorprone "com.uber.nullaway:nullaway:0.10.20"
	errorprone "edu.ucr.cs.riple.annot-util:AnnotLocator:0.1"
	errorprone "edu.ucr.cs.riple.annotator:annotator-scanner:1.3.14"
	errorprone "com.google.errorprone:error_prone_core:2.29.2"
	compileOnly "com.google.code.findbugs:jsr305:3.0.2"
	compileOnly "com.uber.nullaway:nullaway-annotations:0.10.20"
}



def scanner_path = project.projectDir.parent + "/annotator-out/scanner.xml"
def nullaway_path = project.projectDir.parent + "/annotator-out/nullaway.xml"

import net.ltgt.gradle.errorprone.CheckSeverity
tasks.withType(JavaCompile) {
	options.errorprone.disableAllChecks = true
	options.errorprone {
		check("NullAway", CheckSeverity.WARN)
		check("AnnotatorScanner", CheckSeverity.WARN)
		// check("AnnotLocator", CheckSeverity.WARN)
		option("NullAway:AnnotatedPackages", "org.springframework.messaging")
		option("NullAway:UnannotatedSubPackages", "org.springframework.instrument,org.springframework.context.index," +
				"org.springframework.asm,org.springframework.cglib,org.springframework.objenesis," +
				"org.springframework.javapoet,org.springframework.aot.nativex.substitution,org.springframework.aot.nativex.feature")
		option("NullAway:SerializeFixMetadata", "true")
		option("NullAway:AssertsEnabled", "true")
		option("NullAway:FixSerializationConfigPath", nullaway_path)
		option("AnnotatorScanner:ConfigPath",  scanner_path)
	}
	// Set max errors to 10000
	options.compilerArgs += ["-Xmaxerrs", "10000"]
	options.compilerArgs += ["-Xmaxwarns", "10000"]
}
